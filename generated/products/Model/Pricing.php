<?php
/**
 * Pricing
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Otto\Market\Products
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Public Partner Product API
 *
 * Manage your product data, send images and                   much more.
 *
 * The version of the OpenAPI document: V1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Otto\Market\Products\Model;

use \ArrayAccess;
use \Otto\Market\Products\ObjectSerializer;

/**
 * Pricing Class Doc Comment
 *
 * @category Class
 * @package  Otto\Market\Products
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class Pricing implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Pricing';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'standardPrice' => '\Otto\Market\Products\Model\MonetaryAmount',
        'vat' => 'string',
        'msrp' => '\Otto\Market\Products\Model\MonetaryAmount',
        'sale' => '\Otto\Market\Products\Model\Sale',
        'normPriceInfo' => '\Otto\Market\Products\Model\NormPriceInfo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'standardPrice' => null,
        'vat' => null,
        'msrp' => null,
        'sale' => null,
        'normPriceInfo' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'standardPrice' => 'standardPrice',
        'vat' => 'vat',
        'msrp' => 'msrp',
        'sale' => 'sale',
        'normPriceInfo' => 'normPriceInfo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'standardPrice' => 'setStandardPrice',
        'vat' => 'setVat',
        'msrp' => 'setMsrp',
        'sale' => 'setSale',
        'normPriceInfo' => 'setNormPriceInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'standardPrice' => 'getStandardPrice',
        'vat' => 'getVat',
        'msrp' => 'getMsrp',
        'sale' => 'getSale',
        'normPriceInfo' => 'getNormPriceInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const VAT_FULL = 'FULL';
    const VAT_REDUCED = 'REDUCED';
    const VAT_FREE = 'FREE';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVatAllowableValues()
    {
        return [
            self::VAT_FULL,
            self::VAT_REDUCED,
            self::VAT_FREE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['standardPrice'] = $data['standardPrice'] ?? null;
        $this->container['vat'] = $data['vat'] ?? null;
        $this->container['msrp'] = $data['msrp'] ?? null;
        $this->container['sale'] = $data['sale'] ?? null;
        $this->container['normPriceInfo'] = $data['normPriceInfo'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['standardPrice'] === null) {
            $invalidProperties[] = "'standardPrice' can't be null";
        }
        if ($this->container['vat'] === null) {
            $invalidProperties[] = "'vat' can't be null";
        }
        $allowedValues = $this->getVatAllowableValues();
        if (!is_null($this->container['vat']) && !in_array($this->container['vat'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'vat', must be one of '%s'",
                $this->container['vat'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets standardPrice
     *
     * @return \Otto\Market\Products\Model\MonetaryAmount
     */
    public function getStandardPrice()
    {
        return $this->container['standardPrice'];
    }

    /**
     * Sets standardPrice
     *
     * @param \Otto\Market\Products\Model\MonetaryAmount $standardPrice standardPrice
     *
     * @return self
     */
    public function setStandardPrice($standardPrice)
    {
        $this->container['standardPrice'] = $standardPrice;

        return $this;
    }

    /**
     * Gets vat
     *
     * @return string
     */
    public function getVat()
    {
        return $this->container['vat'];
    }

    /**
     * Sets vat
     *
     * @param string $vat The value added tax that is included in the sales price, currently FULL or REDUCED
     *
     * @return self
     */
    public function setVat($vat)
    {
        $allowedValues = $this->getVatAllowableValues();
        if (!in_array($vat, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'vat', must be one of '%s'",
                    $vat,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['vat'] = $vat;

        return $this;
    }

    /**
     * Gets msrp
     *
     * @return \Otto\Market\Products\Model\MonetaryAmount|null
     */
    public function getMsrp()
    {
        return $this->container['msrp'];
    }

    /**
     * Sets msrp
     *
     * @param \Otto\Market\Products\Model\MonetaryAmount|null $msrp msrp
     *
     * @return self
     */
    public function setMsrp($msrp)
    {
        $this->container['msrp'] = $msrp;

        return $this;
    }

    /**
     * Gets sale
     *
     * @return \Otto\Market\Products\Model\Sale|null
     */
    public function getSale()
    {
        return $this->container['sale'];
    }

    /**
     * Sets sale
     *
     * @param \Otto\Market\Products\Model\Sale|null $sale sale
     *
     * @return self
     */
    public function setSale($sale)
    {
        $this->container['sale'] = $sale;

        return $this;
    }

    /**
     * Gets normPriceInfo
     *
     * @return \Otto\Market\Products\Model\NormPriceInfo|null
     */
    public function getNormPriceInfo()
    {
        return $this->container['normPriceInfo'];
    }

    /**
     * Sets normPriceInfo
     *
     * @param \Otto\Market\Products\Model\NormPriceInfo|null $normPriceInfo normPriceInfo
     *
     * @return self
     */
    public function setNormPriceInfo($normPriceInfo)
    {
        $this->container['normPriceInfo'] = $normPriceInfo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


